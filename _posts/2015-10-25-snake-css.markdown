<html>
   <head>
      <title>css-snake</title>
   </head>
   <body>
   	  <div><a href="/" style = "color: #A5A5A5; text-decoration: none;">&larr; Back to Hendrix's Lab</a></div>
      <div class="caption">css-snake</div>
      <div class="sub-caption">A snake simulator built using HTML, CSS and JavaScript in just about an hour.</div>
      <div id="board">
      </div>
   </body>
   <style type="text/css">
      body{ padding:0;margin:0;background: #FFF;color: #777; float: left; font-family: sans-serif; }
      #board{ float: left;width:600px;height:600px;background: #757575; }
      .pixel{ width:10px;height:10px;float: left;background:transparent; }
      .pixel-lighted{background:#fff;}
      .caption{padding: 5px; font-size:48px;}
      .sub-caption{font-size: 14px; color: #bbb; padding: 10px 6px 30px;}
   </style>
   <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>
   <script type="text/javascript">
      var widthOfPixel = 10; // Height of pixel will be the same, since we are using square pixels
      var widthStage = 60; // NUmber of blocks
      var heightStage = 60; // Number of blocks or virtual pixels (vixels. I know, seriously need to rename this)
      var numberOfBlocks = widthStage*widthOfPixel * heightStage*widthOfPixel / (10*10);
      var counter = 0;
      var board = $('#board');
      while(counter < numberOfBlocks) {
      	board.append('<div class="pixel number-'+counter+'"> </div>');
      	counter++;
      }
      
      function lightPixel(x,y) {
      	$('.number-'+(widthStage*y + x*1)).addClass('pixel-lighted');
      }
      function unlightPixel(x,y) {
      	$('.number-'+(widthStage*y + x*1)).removeClass('pixel-lighted');
      }
      
      
      /* defining snake object. Will have properties: length, direction */
      // directions up = 1, right = 2, left = 3, down = 4
      var up = 1, right = 2, left = 3, down = 4;
      function Snake() {
      	this.length = 8;
      	this.direction = right;
      	this.tailDirection = right;
      	this.untracedBends=[];//Stores coordinates of the bends untraced by the snake's tail 
      	this.moveUp=function() {
      		this.headPosition.y --;
      	}
      	this.moveRight=function() {
      		this.headPosition.x ++;
      	}
      	this.moveLeft = function() {
      		this.headPosition.x --;
      	}
      	this.moveDown = function() {
      		this.headPosition.y ++;
      	}
      	this.headPosition = {'x':30,'y':30};
      	this.create=function() {
      		// Un-light all pixels, and light up fresh set of pixels for a new snake
      		$('.pixel-lighted').removeClass('pixel-lighted');
      		// Place tim's head
      		lightPixel(this.headPosition.x, this.headPosition.y);
      		// Draw the rest of the body
      		for(pixelsDrawn=1; pixelsDrawn<this.length; pixelsDrawn++) {
      			lightPixel(this.headPosition.x - pixelsDrawn, this.headPosition.y);
      			this.tailPosition={'x':this.headPosition.x - pixelsDrawn, 'y':this.headPosition.y};
      		}
      	}
      }
      
      var tim = new Snake();
      tim.create();
      
      /* Engine will decide what will be drawn in the next frame */
      function roarEngine() {
      	switch(tim.direction) {
      		case up:
      			tim.moveUp();
      			break;
      		case right:
      			tim.moveRight();
      			break;
      		case left:
      			tim.moveLeft();
      			break;
      		case down:
      			tim.moveDown();
      			break;
      		default:
      			// Game paused
      	}
      
      	lightPixel(tim.headPosition.x, tim.headPosition.y);
      	// Un-draw the tail
      	unlightPixel(tim.tailPosition.x, tim.tailPosition.y);// Since tail moves forward, hide older tail pixel
      	//Decide the new position for the tail
      		switch(tim.tailDirection) {
      			case right:
      				tim.tailPosition.x ++;
      				break;
      			case left:
      				tim.tailPosition.x --;
      				break;
      			case up:
      				tim.tailPosition.y --;
      				break;
      			case down:
      				tim.tailPosition.y ++;
      				break;
      		}
      	// Decide the new direction for the tail (as there might be a bend on current position)
      	for(untracedBendsCounter = 0; untracedBendsCounter<tim.untracedBends.length; untracedBendsCounter++) {
      		if(tim.untracedBends[untracedBendsCounter].x==tim.tailPosition.x && 
      			tim.untracedBends[untracedBendsCounter].y == tim.tailPosition.y) {
      			tim.tailDirection = tim.untracedBends[untracedBendsCounter].direction;
      			tim.untracedBends.splice(untracedBendsCounter, 1);// Remove this from array
      			return;
      		}
      	}
      }
      
      function startEngine() {
      	$(document).keydown(function(e) {
      		// Direction cannot change from
      		switch(e.keyCode) {
      			case 38:
      				// If snake was going down, this movement is not possible
      				if(tim.direction == down) return;
      				tim.untracedBends.unshift({'x':tim.headPosition.x, 'y':tim.headPosition.y, 'direction':up});
      				tim.direction=up;
      				break;
      			case 39:
      				if(tim.direction == left) return;// Cannot reverse-turn abruptly
      				tim.untracedBends.unshift({'x':tim.headPosition.x, 'y':tim.headPosition.y, 'direction':right});
      				tim.direction=right;
      				break;
      			case 37:
      				if(tim.direction == right) return;// Cannot reverse-turn abruptly
      				tim.untracedBends.unshift({'x':tim.headPosition.x, 'y':tim.headPosition.y, 'direction':left});
      				tim.direction=left;
      				break;
      			case 40:
      				if(tim.direction == up) return;// Cannot reverse-turn abruptly
      				tim.untracedBends.unshift({'x':tim.headPosition.x, 'y':tim.headPosition.y, 'direction':down});
      				tim.direction=down;
      				break;
      		}
      });
      	window.setInterval(function() {
      		roarEngine();
      	}, 100);
      	
      }
      startEngine();
   </script>
   <script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-69404210-1', 'auto');
  ga('send', 'pageview');

</script>
</html>